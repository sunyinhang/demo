buildscript {
    ext {
        springBootVersion = '1.3.7.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url 'http://10.164.194.139:8081/nexus/content/repositories/public/' }
//        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
}

configurations.all {
    // 默认情况下包才上传后24小时更新一次，这个配置自动更新为10s
    // 10秒钟，可自定义，如10,'minutes'10分钟，10,'hours'10小时
    resolutionStrategy.cacheChangingModulesFor 10, 'seconds'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: "io.spring.dependency-management"

group = 'com.haiercash'
version = '1.0.0'

springBoot {
    classifier = 'exec'
}

test {
    outputs.dir snippetsDir
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDirs 'src/main/java'
        }
    }
}

jar {
    baseName = 'payplatform'
    version = project.version

    from('static') {
        into 'static'
    }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE'
    }
}

repositories {
    mavenLocal()
    maven { url 'http://10.164.194.139:8081/nexus/content/repositories/public/' }
    flatDir {
        dirs 'lib'
    }
}
dependencies {
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile("com.bestvike:bv-mybatis:3.4.0-SNAPSHOT")
    compile("com.bestvike:bv-jxls-poi:1.0.9-SNAPSHOT")
    compile("com.bestvike:bv-jxls-reader:2.0.2-SNAPSHOT")
    compile("com.haiercash:util:2.0.39-SNAPSHOT")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-redis")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile('org.springframework.cloud:spring-cloud-starter-ribbon')
    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile("org.springframework.session:spring-session")
//    compile("org.springframework.data:spring-data-redis:1.7.2.RELEASE")
//    compile("org.springframework.security:spring-security-config")
    compile("org.springframework.batch:spring-batch-core:3.0.7.RELEASE")
    compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final")
//    compile("org.hibernate:ejb3-persistence:3.3.2.Beta1")
    compile("cglib:cglib-nodep:3.2.2")
    compile("org.javassist:javassist:3.20.0-GA")
    compile("ognl:ognl:3.1.4")
    compile("org.aspectj:aspectjrt:1.8.9")
    compile("org.aspectj:aspectjweaver:1.8.9")
//    compile("log4j:log4j:1.2.17")
    compile("org.apache.logging.log4j:log4j-core:2.5")
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
//    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")
    compile('org.json:json:20160212')

    compile("org.apache.poi:poi:3.12")
    compile("org.apache.poi:poi-ooxml:3.12")
    compile("org.jxls:jxls:2.3.0")
    compile("org.apache.commons:commons-digester3:3.2")
    // compile("com.haiercash:jxls-poi:1.0.9.1")
    // compile("com.haiercash:jxls-reader:2.0.2.4")

    compile("com.oracle:ojdbc6:11g")
    compile("com.alibaba:druid:1.0.26")
    // compile("com.haiercash:mybatis:3.4.0.8")

    // fastjson
    compile("com.alibaba:fastjson:1.2.12")
    compile("commons-lang:commons-lang:3.1.1")
//    compile("com.haiercash:util:1.1.25-SNAPSHOT")
//    compile(":mybatis-spring-boot-autoconfigure-1.1.1:")
//    compile(":mybatis-spring-boot-starter-1.1.1:")
    compile('de.odysseus.staxon:staxon:1.3')
    testCompile("org.springframework.boot:spring-boot-starter-test")
}


processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
compileJava.dependsOn(processResources)
